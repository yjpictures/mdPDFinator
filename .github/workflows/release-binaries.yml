name: Release Binaries

on:
  push

jobs:

  build-binaries:

    name: Build all the binaries
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2019]
    runs-on: ${{ matrix.os }}

    steps:

      - name: Checkout the repository
        uses: actions/checkout@v3
      
      - name: Setup Python ${{ vars.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      
      - name: Setup Poetry ${{ vars.POETRY_VERSION }}
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ vars.POETRY_VERSION }}

      - name: Install depencencies
        run: poetry install --with prod
      
      - name: Create pyinstaller package
        run: poetry run pyinstaller --onefile mdPDFinator.py

      - name: Upload the binary
        uses: actions/upload-artifact@v3
        with:
          name: executable-${{ runner.os }}
          path: dist/mdPDFinator*
    
  test-binaries:

    name: Test all the binaries
    needs: build-binaries
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:

      - name: Download the binary
        uses: actions/download-artifact@v3
        with:
          name: executable-${{ runner.os }}

      - name: Download sample markdown
        run: |
          curl ${{ vars.SAMPLE_MARKDOWN_URL }} -o sample.md

      - name: Install weasyprint (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          chmod 775 mdPDFinator
          sudo apt install weasyprint

      - name: Install weasyprint (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          chmod 775 mdPDFinator
          brew install weasyprint

      - name: Install weasyprint (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: yjpictures/GTK-Windows

      - name: Test it out
        run: |
          ./mdPDFinator sample.md

      - name: Upload the converted PDF file
        uses: actions/upload-artifact@v3
        with:
          name: test-output-${{ runner.os }}
          path: output.pdf

  release-docker-image:
    
    name: Release docker image
    needs:
      - test-binaries
    if: startsWith(github.event.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest

    steps:

      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            docker
            .github

      - name: Download the binary (Linux)
        uses: actions/download-artifact@v3
        with:
          name: executable-Linux

      - name: Move the executable to dist/ folder
        run: |
          mkdir dist
          mv mdPDFinator dist/mdPDFinator
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Docker Metadata Capture
        id: meta
        uses: docker/metadata-action@v5
        with:
          context: git
          images: |
            ghcr.io/${{ github.repository }}
            ${{ github.repository }}
          tags: |
            type=semver,pattern=v{{version}}
            type=raw,value=latest
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ vars.DOCKERFILE_PROD }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            "org.opencontainers.image.description=${{ vars.GHCR_DESCRIPTION }}"
          provenance: false
      
      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ github.repository }}
          short-description: ${{ vars.DOCKER_HUB_DESCRIPTION }}
          readme-filepath: ${{ vars.README_FILE_PATH }}

  release-binaries:

    name: Release all the binaries
    needs:
      - test-binaries
    if: startsWith(github.event.ref, 'refs/tags/v')
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:

      - name: Download the binary (Linux)
        uses: actions/download-artifact@v3
        with:
          name: executable-Linux

      - name: Rename execuatable (Linux)
        run: mv mdPDFinator mdPDFinator-Linux

      - name: Download the binary (macOS)
        uses: actions/download-artifact@v3
        with:
          name: executable-macOS

      - name: Rename execuatable (macOS)
        run: mv mdPDFinator mdPDFinator-macOS

      - name: Download the binary (Windows)
        uses: actions/download-artifact@v3
        with:
          name: executable-Windows

      - name: Rename execuatable (Windows)
        run: mv mdPDFinator.exe mdPDFinator-Windows.exe

      - name: Upload the executables to the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: mdPDFinator*
          tag: ${{ github.ref }}
          overwrite: true
